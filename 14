// 13.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include "conio.h"
#define MAX 20

using namespace std;

struct matM{
	int submat[MAX][MAX];
};
void invertir(matM mat[MAX][MAX], int n);
void main()
{
	matM mat[MAX][MAX];
	int i,j,k,l,n;
	cout<<"ingresar el orden de la matriz externa y de las matrices internas"<<endl;
	cin>>n;

	for(i=0;i<n;i++)
	{	for(j=0;j<n;j++)
		{	for(k=0;k<n;k++)
			{	for(l=0;l<n;l++)
				{
					cout<<"mat["<<i<<"]["<<j<<"].submat["<<k<<"]["<<l<<"]=";
					cin>>mat[i][j].submat[k][l];
				}
			}
		}
	}
	cout<<"INVERTIDA"<<endl;
	invertir(mat,n);
	for(i=0;i<n;i++)
	{	for(j=0;j<n;j++)
		{	for(k=0;k<n;k++)
			{	for(l=0;l<n;l++)
				{
					cout<<"mat["<<i<<"]["<<j<<"].submat["<<k<<"]["<<l<<"]="<<mat[i][j].submat[k][l]<<endl;
				}
			}
		}
	}
	getch();
}
void invertir(matM mat[MAX][MAX], int n)
{	
	int vec[10],tamv,aux;
	tamv=0;
	int i,j,k,l;
	for(i=0;i<n;i++)
	{	for(j=0;j<n;j++)
		{	for(k=0;k<n;k++)
			{	for(l=0;l<n;l++)
				{
					if((i==j)&&(k==l))
					{
						vec[tamv]=mat[i][j].submat[k][l];
						tamv++;
					}
				}
			}
		}
	}

	for(i=0;i<(tamv/2);i++)
	{
		aux=vec[i];
		vec[i]=vec[tamv-1-i];
		vec[tamv-1-i]=aux;
	}
	tamv=0;
	for(i=0;i<n;i++)
	{	for(j=0;j<n;j++)
		{	for(k=0;k<n;k++)
			{	for(l=0;l<n;l++)
				{
					if((i==j)&&(k==l))
					{
						mat[i][j].submat[k][l]=vec[tamv];
						tamv++;
					}
				}
			}
		}
	}
}
